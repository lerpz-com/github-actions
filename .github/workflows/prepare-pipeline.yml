name: Prepare pipeline and set variables

on:
  workflow_call:
    outputs:
      PROJECT_TYPE:
        description: The project type
        value: ${{ jobs.prepare-variables.outputs.DEPLOY_ENV }}

      DEPLOY_PLATFORM:
        description: Deployment platform
        value: ${{ jobs.prepare-variables.outputs.DEPLOY_ENV }}
        
      DEPLOY_ENV:
        description: Deployment environment (prod, stag or dev)
        value: ${{ jobs.prepare-variables.outputs.DEPLOY_ENV }}

      IMAGE_NAME:
        description: The name of the image to build
        value: ${{ jobs.prepare-variables.outputs.IMAGE_NAME }}

jobs:
  prepare-variables:
    runs-on: ubuntu-latest

    outputs:
      PROJECT_TYPE: ${{ steps.required-vars.outputs.PROJECT_TYPE }}
      DEPLOY_PLATFORM: ${{ steps.deploy-platform.outputs.DEPLOY_PLATFORM }}
      DEPLOY_ENV: ${{ steps.deploy-env.outputs.DEPLOY_ENV }}
      IMAGE_NAME: ${{ steps.image-name.outputs.IMAGE_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate required variables
        id: required-vars
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: |
          required_variables=(PROJECT_TYPE)

          while IFS= read -r env_var; do
              export $env_var
          done < <(echo $SECRETS_CONTEXT | jq -r 'to_entries| .[] | .key + "=\"" + (.value|tostring) + "\""')

          while IFS= read -r env_var; do
              export $env_var
          done < <(echo $VARS_CONTEXT | jq -r 'to_entries| .[] | .key + "=\"" + (.value|tostring) + "\""')

          if [[ -f .env.example ]]; then
              while IFS= read -r line || [[ -n "$line" ]]; do
              if [[ "$line" == *'='* && "$line" != '#'* ]]; then
                  required_variables+=("$(echo "$line" | cut -d '=' -f 1)")
              fi
              done < ".env.example"
          fi

          missing_variables=()

          for var in "${required_variables[@]}"; do
              if [[ -z ${!var} ]]; then
                  echo $var
                  missing_variables+=($var)
              fi
          done

          if [[ ${#missing_variables[@]} -gt 0 ]]; then
              for var in "${missing_variables[@]}"; do
                  echo "Missing \"$var\" variable"
              done
              exit 1
          fi

          echo "PROJECT_TYPE=$PROJECT_TYPE"
          echo "PROJECT_TYPE=$PROJECT_TYPE" >> $GITHUB_OUTPUT
      
      - name: Set deployment platform variable
        id: deploy-platform
        env:
          DEPLOY_PLATFORM: ${{ vars.DEPLOY_PLATFORM }}
        run: |
          if [[ -z $DEPLOY_PLATFORM ]]; then
              DEPLOY_PLATFORM="Not specified"
          fi

          echo "DEPLOY_PLATFORM=$DEPLOY_PLATFORM"
          echo "DEPLOY_PLATFORM=$DEPLOY_PLATFORM" >> $GITHUB_OUTPUT

      - name: Set deployment environment variable
        id: deploy-env
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ $BRANCH == "main" || $BRANCH == "master" ]]; then
              DEPLOY_ENV=prod
          elif [[ $BRANCH == "staging" ]]; then
              DEPLOY_ENV=stag
          else
              DEPLOY_ENV=dev
          fi

          echo "DEPLOY_ENV=$DEPLOY_ENV"
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_OUTPUT

      - name: Set docker image name
        id: image-name
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          IMAGE_NAME=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Write prepare summary
        run: |
          echo "### Prepare pipeline:               
          <table>
            <tr>
              <td>üí° Project type</td>
              <td>${{ steps.required-vars.outputs.PROJECT_TYPE }}</td>
            </tr>
            <tr>
              <td>üöÄ Deployment platform</td>
              <td>${{ steps.deploy-platform.outputs.DEPLOY_PLATFORM }}</td>
            </tr>
            <tr>
              <td>üéØ Deployment environment</td>
              <td>${{ steps.deploy-env.outputs.DEPLOY_ENV }}</td>
            </tr>
            <tr>
              <td>üê≥ Image name</td>
              <td>${{ steps.image-name.outputs.IMAGE_NAME }}</td>
            </tr>
          </table>" >> $GITHUB_STEP_SUMMARY

  prepare-azure:
    if: |
      needs.prepare-variables.outputs.DEPLOY_ENV == 'prod' ||
      needs.prepare-variables.outputs.DEPLOY_ENV == 'stag' &&
      vars.DEPLOY_PLATFORM == 'azure'
    runs-on: ubuntu-latest

    needs: prepare-variables

    environment: ${{ needs.prepare-variables.outputs.DEPLOY_ENV }}

    permissions:
      id-token: write

    steps:
      - name: Validate login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}

      - name: Azure CLI show account
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show
