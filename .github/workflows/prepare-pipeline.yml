name: Prepare pipeline and set variables

on:
  workflow_call:
    outputs:
      DEPLOY_ENV:
        description: Deployment environment (prod, stag or dev)
        value: ${{ jobs.prepare-pipeline.outputs.DEPLOY_ENV }}

      IMAGE_NAME:
        description: The name of the image to build
        value: ${{ jobs.prepare-pipeline.outputs.IMAGE_NAME }}

      RUST_TOOLCHAIN:
        description: The toolchain for Rust to use
        value: ${{ jobs.prepare-pipeline.outputs.RUST_TOOLCHAIN }}

jobs:
  prepare-azure:
    runs-on: ubuntu-latest
    if: vars.DEPLOY_PLATFORM == 'azure'
    steps:
      - name: Validate log in to Azure using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI show account
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show

  prepare-variables:
    runs-on: ubuntu-latest

    outputs:
      DEPLOY_ENV: ${{ steps.deploy-environment.outputs.DEPLOY_ENV }}
      IMAGE_NAME: ${{ steps.image-name.outputs.IMAGE_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set deployment platform variable
        id: deploy-platform
        run: |
          if [[ -z $DEPLOYMENT_PLATFORM ]]; then
              DEPLOYMENT_PLATFORM=Not given
          fi

      - name: Set deployment environment variable
        id: deploy-environment
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ $BRANCH == "main" || $BRANCH == "master" ]]; then
              DEPLOY_ENV=prod
          elif [[ $BRANCH == "staging" ]]; then
              DEPLOY_ENV=stag
          else
              DEPLOY_ENV=dev
          fi

          echo "DEPLOY_ENV="$DEPLOY_ENV
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_OUTPUT

      - name: Set docker image name
        id: image-name
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          IMAGE_NAME=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Write prepare summary
        run: |
          echo "### Prepare pipeline:               
          <table>
            <tr>
              <td>🎯 Deployment environment</td>
              <td>${{ steps.deploy-environment.outputs.DEPLOY_ENV }}</td>
            </tr>
            <tr>
              <td>🚀 Deployment platform</td>
              <td>${{ steps.deploy-platform.outputs.IMAGE_NAME }}</td>
            </tr>
            <tr>
              <td>🐳 Image name</td>
              <td>${{ steps.image-name.outputs.IMAGE_NAME }}</td>
            </tr>
          </table>" >> $GITHUB_STEP_SUMMARY
